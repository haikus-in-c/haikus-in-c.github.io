<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Haikus in C</title>
 <link href="http://haikus-in-c.github.io/atom.xml" rel="self"/>
 <link href="http://haikus-in-c.github.io/"/>
 <updated>2013-08-05T12:55:44-03:00</updated>
 <id>http://haikus-in-c.github.io</id>
 <author>
   <name>Haikus in C</name>
 </author>
 
 
 <entry>
   <title>Spotify Programming Challenge 1: Reggae</title>
   <link href="http://haikus-in-c.github.io/posts/spotify-programming-challenge-reggae"/>
   <updated>2013-04-12T00:00:00-03:00</updated>
   <id>http://haikus-in-c.github.io/posts/spotify-programming-challenge-reggae</id>
   <content type="html">&lt;p&gt;Here&amp;rsquo;s what we need to do: write a program that takes some integer in decimal form
between 1 and 1,000,000,000 (inclusive), converts it to binary form, reverses that binary
number, and then converts the result back into decimal form.&lt;/p&gt;

&lt;p&gt;For example, on input 4, we convert to binary number 100, reverse it to 001, then convert
that back to decimal form, which in this case would be 1. So 4 &gt; 100 &gt; 001 &gt; 1.&lt;/p&gt;

&lt;p&gt;This problem is pretty simple, we really only need to do three things: convert an integer
from decimal to binary and vice versa, and reverse a string. It should be noted that there
are standard library functions to do all of these things. The Integer class has a builtin
toBinaryString() method and the String class has a built in reverse() method. But of course,
we&amp;rsquo;re not going to use those.&lt;/p&gt;

&lt;p&gt;So, to tackle the first of our problems let&amp;rsquo;s look at converting an integer to a binary string.
Let&amp;rsquo;s return to 4, since it&amp;rsquo;s easy to work with. As we saw above, 4 is 100 (1*2&lt;sup&gt;2&lt;/sup&gt; + 0*2&lt;sup&gt;1&lt;/sup&gt; + 0*2&lt;sup&gt;0&lt;/sup&gt;)
in binary. This literally means that 4 has: one 4, zero 2s, and zero 1s. To see the pattern a
a little clearer, let&amp;rsquo;s go bigger: 100 = 1100100. 100 has: one 64, one 32, zero 16s, zero 8s, one 4,
zero 2s, and zero 1s. OK, I think we&amp;rsquo;ve got the pattern now. What we need to do is figure out how
many times each power of two is in the number. The key is modulus division.&lt;/p&gt;

&lt;p&gt;If we divide some integer x mod 2, we get either a 1 or a 0, telling us that 2 perfectly fit into
this number, or that it didn&amp;rsquo;t. This 1 or 0 also represents the 1s place of the binary string
representation of that integer.  If we take (x/2) mod 2, we again get either a 1 or a 0, but
because we divided by 2, &lt;em&gt;this&lt;/em&gt; 1 or 0 represents the 2s place of the binary string. We can
continue this method until the next division by 2 results in a 0, then we have the whole
binary string.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;latex&quot;&gt;    4&lt;span class=&quot;c&quot;&gt;%2 = 0 --&amp;gt; append to binary string: 0&lt;/span&gt;
    4/2 = 2
    2&lt;span class=&quot;c&quot;&gt;%2 = 0 --&amp;gt; append to binary string: 00&lt;/span&gt;
    2/2 = 1
    1&lt;span class=&quot;c&quot;&gt;%2 = 1 --&amp;gt; append to binary string: 001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that this method gives us the number in a reversed form &lt;em&gt;already&lt;/em&gt;, assuming we
just appended each number onto a String as we got it. Below is code that executes this
idea.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convertDecimalToReversedBinary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, all we need is a method to convert a binary string back into an integer. This isn&amp;rsquo;t
hard, as we already know how binary strings are put together. My method works backwards
from the end of the string, adding increasing powers of 2 to a final result value that&amp;rsquo;s
returned at the end.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convertBinaryToDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that&amp;rsquo;s it! We solved the first spotify programming challenge.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Welcome</title>
   <link href="http://haikus-in-c.github.io/posts/welcome"/>
   <updated>2013-04-05T00:00:00-03:00</updated>
   <id>http://haikus-in-c.github.io/posts/welcome</id>
   <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://haikus-in-c.github.io&quot;&gt;Haikus in C&lt;/a&gt;, the programming blog of Ian and Ruchir, two
CS students at Columbia.&lt;/p&gt;

&lt;p&gt;Stay tuned for our migration here from &lt;a href=&quot;https://haikusinc.tumblr.com&quot;&gt;tumblr&lt;/a&gt;, and some new posts too!&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
